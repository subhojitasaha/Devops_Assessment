Objective:- Assignments will help trainees to understand the basics of unix command and how to explore and use it.

DO NOT copy paste commands from internet, you can take help of the Unix in-built command manual.

Be Honest to yourself!

Important command and option to learn unix commands:-
man Command
Example:-
man ls

--help Option
Example:-
ls --help

NOTE:- Always use "man" command before using any unix commands and read about it and its options and how to use it.

Assignments:-

List the contents of a directory and their attributes
Ans- ls /dir command
Long list the content with file, directory ownership, permissions,sizes, etc…
Ans- ls -l command
Display the size of the file in human readable format
Ans- ls -lh command
Show all files and folders including hidden one
Ans- ls -a
list directories recursively
Ans- ls -R
Sort the files by size with largest at the top
Ans- ls -l -h -S
Sort the files by last time modified displaying the newest first.
Ans- ls -l -t
Diplay the location of a program/command, where it is installed.
Ans- whereis with program/command name
Which command is used to switch directory from one to another
Ans- By using cd command with directory name
List all the environment variables set for the current shell environment
Ans- printenv
Did you notice something in the output of "env" command?

Which command is used to print the text or any variables value in the Console/Terminal?
Ans- echo
Print the value of the env variable "PATH" on the console
Ans- echo $PATH
Is linux a case-sensitive operating system?
Ans- Yes
Is, "Ls" same as "ls"?
Ans- No
Display your currently logged in user
Ans- who command
how do you change the currrently logged in user to another user?
Ans- su command 
Which command is used to leave a shell environment that you are currently logged in to?
Ans- cd
How do you reboot the system?
Ans- sudo reboot
How do you shutdown the system?
Ans- shutdown -y -g 15 -i s "system going down" 
Display all the major running processes in the system
Ans- ps aux
Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
Ans- USER = user owning the process
PID = process ID of the process
%CPU = It is the CPU time used divided by the time the process has been running.
%MEM = ratio of the process’s resident set size to the physical memory on the machine
VSZ = virtual memory usage of entire process (in KiB)
RSS = resident set size, the non-swapped physical memory that a task has used (in KiB)
TTY = controlling tty (terminal)
STAT = multi-character process state
START = starting time or date of the process
TIME = cumulative CPU time
COMMAND = command with all its arguments
Display the name of the system kernel
Ans- uname -s command
display the kernel release number
Ans- uname -r command
display teh machine type of the current kernel

Display the name of the operating system that the kernel is running on
Ans- uname -s command
Display all info that uname command can show.
Ans- uname -a command
Display the name of directory that you are currently pointing to
Ans- pwd command
change the current directory to another directory that you have in your system.
Ans- By using cd command with directory name
Go up one directory
Ans- cd.. command
Return to last directory
Ans- cd - command
change the current directory to home(logged in user's) directory
Ans- cd 
How to check all the command used from the prompt (Command History)
Ans- history
In which file the history of commands are stored in?
Ans- ~/. bash_history
How many lines of history does the system keep and from where you can change it?
Ans- 100, 500, 1000 HISTSIZE
How can you modify bash's history behaviour

Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.

NOTE:- TAB key is your friend when it comes to command completion and having long file and directory names autocompleted at the bash prompt for you. JUST BE LAZY AND USE TAB KEY FOR AUTO COMPLETION ;-)

What are the different types of shell and where are they used and how do we use them?
Ans- Bourne shell - for writing scripts to use on several different versions of UNIX.
c shell
What is the difference between login shell and non-login shell?
Ans- login shell
When a login shell start, it runs a set of predefined script to configure shell environment.
Non login shell
Non Login Shell is the shell, which is started by the login shell.
What happens when you start a login shell (which files are read and used and Why)?
Ans- A login shell reads special setup files. login C shells read your .login file, and Bourne-type login shells read .profile. Bash may also read /etc/profile, and ~/.bash_profile or ~/.bash_login or ~/.profile
What happens when you start a non-login shell (Which files are read and used and Why)?
Ans- These shells don't read .login or .profile. In addition, bash allows a nonlogin shell to read ~/.bashrc or not, depending on whether the -norc or -rcfile options have been passed as arguments during invocation.
Explain the Order of file usage from the system/user's home directory when user logs in to the System.

What are Shell Configuration Files, why do we need it?
Ans- Shell configuration files are executed automatically when you log in and out of a shell. They initialize and configure a shell upon login and perform cleanup operations upon logout.
What are Shell Variables, list major shell variables and what do they represent?
Ans- A shell variable is a variable that is available only to the current shell.
$0- The filename of the current script.
$n- These variables correspond to the arguments with which a script was invoked. Here n is a positive decimal number corresponding to the position of an argument
$#- The number of arguments supplied to a script.
$*- All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
$@- All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.	
$?- The exit status of the last command executed.	
$$- The process number of the current shell. For shell scripts, this is the process ID under which they are executing.	
$!- The process number of the last background command.
How we see all our env variables?
Ans- printenv
How we see all env variables in alphabical order?
Ans- printenv | sort command
What Format does the env var and its values are stored?

How do you create your own varible?
Ans- A variable is defined by simply assigning a value to a name using the ‘=’ operator. A variable name is a series of alphanumeric characters. eg- $ myvar=hello
How do you start a new bash shell?
Ans- place #!/bin/bash at the top of the file.
Difference between Local/Shell variables to Global Variable
Ans- Global variables are declared outside any function, and they can be accessed (used) on any function in the program. 
Local variables are declared inside a function, and can be used only inside that function. 
It is possible to have local variables with the same name in different functions.
Making a variable accessible from other the shell in the system.

Show the real life use case of exporting a variable

Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"

What is Globbing? Explain in depth with examples?
Ans- Globbing is the process of expanding a non-specific file name containing a wildcard character into a set of specific file names that exist in storage on a computer, server, or network. A wildcard is a symbol that can stand for one or more characters. 
The most common wildcard symbols are the question mark (?) for a single character and the asterisk (*) for a contiguous string of characters.
List all entries with extension ".sh"
Ans- ls .sh*
List all entries with numbers in it.
Ans- ls *[0-9]*
List all entries that starts with a character and ends with a number

List all entries that name length more than 5 characters

What is Quoting? and Why do we need it?
Ans- Unix Shell provides various metacharacters which have special meaning while using them in any Shell Script and causes termination of a word unless quoted. 
A character may be quoted (i.e., made to stand for itself) by preceding it with a \.
Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.
Ans- echo Hello\; Word--> Hello; Word-- Any character immediately following the backslash loses its special meaning.
echo '<-$1500.**>; -- Characters within single quotes are quoted just as if a backslash is in front of each character. With this, the echo command displays in a proper way. We can avoid putting too many backslash if we put single quotes
VAR=ZARA
echo "$VAR owes <-\$1500.**>; [ as of (`date +%m/%d`) ]"---> ZARA owes <-$1500.**>; [ as of (07/02) ] -- Double quotes take away the special meaning of all characters except the following −
$ for parameter substitution,Backquotes for command substitution,\$ to enable literal dollar signs,\` to enable literal backquotes,\" to enable embedded double quotes, \\ to enable embedded backslashes,All other \ characters are literal (not special)
How do you find a particular files/directories based on a particular search criteria?
HINT:- look for commands -> locate, find and whereis
Ans- $ find. file or directory name
Write major difference between locate, find and whereis?
Ans- whereis: will search only particular paths to find binaries and or manpages. 
locate: locate uses a database created by an updatedb to efficiently locate files. Works great, assuming your database is updated often enough to be reasonable upto date. Most boxes using locate have the updatedb occuring in cron.
find: find is perhaps one of the most powerful commands there is. For just locating a file/program of a particular name, it'll definitely be slower than locate or whereis becuase it will search each and every path recursively from it's start point.
How Globbing is different from locate, find and whereis?
Ans- File globbing is a feature provided by the UNIX/Linux shell to represent multiple filenames by using special characters called wildcards with a single file name. A wildcard is essentially a symbol which may be used to substitute for one or more characters
Explain the Linux File System.
Linux File System or any file system generally is a layer that is under the operating system that handles the positioning of your data on the storage; without it, the system cannot knows which file starts from where and ends where.
Linux offers many file systems like these:
Ext, Ext2, Ext3, Ext4, JFS, XFS, btrfs and swap, Ext4 is the fastest and best. 
Explain absolute and Relative Paths
Ans- 1)An absolute path is defined as the specifying the location of a file or directory from the root directory(/).
To write an absolute path-name:
Start at the root directory ( / ) and work down.
2)Relative path is defined as the path related to the present working directly(pwd). It starts at your current directory and never starts with a / .
What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
Ans- touch -New empty file --> eg- $ touch file1.txt
Redirection Operator > -Redirection allows you to capture the output from a command and send it as input to another command or file. --> eg- $ > file1.txt
cat command- The cat command is short for concatenate. It can be used to output the contents of several files, one file, or even part of a file. If the file doesn’t exist, the cat command will create it. --> eg- $ cat > file1.txt
echo- The echo command will duplicate whatever you specify in the command, and put the copy into a file. --> eg- $ echo > file1.txt
printf- The printf command works like the echo command, and it adds some formatting functionality. --> eg- $ printf "Hi" > file1.txt
In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
Ans- vi -->is the oldest text editor in Linux. It was created alongside the Linux operating system for directly editing text files.
Nano-->Nano is a newer and much easier text editor to navigate.
Archiving files using linux command, write a command to archive set of files from linux commands.
Ans- Common tar archives: tar -xf archive. tar
Gzip tar archive: tar -xzf archive. tgz
Bzip tar archive: tar -xjf archive. tbz
Extract the archived files from the above step.
Ans- tar xvf filename.tar